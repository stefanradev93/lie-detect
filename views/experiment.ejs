<% include partials/header %>

<body class>

<!-- Scale -->
<div class="question-wrap">
  <div class="ui stackable container">
    <div class="ui stackable grid container center aligned">
      <div class="one column row">
        <div class="column">
          <div class="ui raised padded text container">
            <h3><%= item.content %></h3>
          </div>
        </div>
      </div>
      <div class="one column row">
        <div class="column">
          <div class="ui segment">
            <div class="ui stackable grid container center aligned">
              <div class="five column row">
                <div class="column">
                  <div class="ui radio checkbox">
                    <input name="response" type="radio" value="-2" id="-2">
                    <label for="-2">Stimme nicht zu</label>
                  </div>
                </div>
                <div class="column">
                  <div class="ui radio checkbox">
                    <input name="response" type="radio" value="-1" id="-1">
                    <label for="-1">Stimme eher nicht zu</label>
                  </div>
                </div>
                <div class="column">
                  <div class="ui radio checkbox">
                    <input name="response" type="radio" value="0" checked id="0">
                    <label for="0">Weder noch</label>
                  </div>
                </div>
                <div class="column">
                  <div class="ui radio checkbox">
                    <input name="response" type="radio" value="1" id="1">
                    <label for="1">Stimme eher zu</label>
                  </div>
                </div>
                <div class="column">
                  <div class="ui radio checkbox">
                    <input name="response" type="radio" value="2" id="2">
                    <label for="2">Stimme zu</label>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="row">
        <div class="two wide row">
          <button id="response-trigger" class="ui large right labeled icon blue button">
            <i class="right arrow icon"></i>
            Weiter
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Modal window -->
<div class="ui modal">
  <div class="ui stackable grid container center aligned">
    <div class="row">
      <div class="sixteen wide column">
        <div class="ui raised padded text container">
          <h3>Bitte sprechen Sie die folgende Aussage:</h3>
        </div>
      </div>
    </div>
    <div class="row">
      <div class="sixteen wide column">
        <div class="ui raised padded text container">
          <h2 id="to-repeat"><em></em></h2>
        </div>
      </div>
    </div>
    <div class="row">
      <div class="sixteen wide column">
        <div class="ui raised container">
          <div id="siri-container">
            <!-- Wave animation will play here -->
          </div>
        </div>
      </div>
    </div>
  </div>
  <div id="record-trigger" class="ui bottom attached blue button">
    <i class="unmute icon"></i>
    Aufnahme starten
  </div>
</div>

<!-- Load thirs party scripts -->
<script type="text/javascript" src="javascripts/siriwave.js"></script>
<script type="text/javascript" src="javascripts/RecordRTC.min.js"></script>
<script type="text/javascript">

// --- Obtain current item --- //
var currentItem = <%- JSON.stringify(item) %>;

// --- UI controller --- //
var UIController = (function() {
  // Create a wave object
  var siriWave = new SiriWave({
          container: document.getElementById('siri-container'),
          width: 200,
          height: 100,
          speed: 0.02,
          color: '#d9dde2',
          frequency: 1
    });
  // Public methods
  return {
    lockPopUp: function() {
      // Show container
      $('#siri-container').css("visibility", 'visible');
      // Disable record button
      $('#record-trigger').toggleClass("disabled");
      // Start wave
      siriWave.start();
    },
    hidePopUp: function() {
      // Stop wave
      siriWave.stop();
      // Hide siri wave
      $('#siri-container').css("visibility", 'hidden');
      // Enable trigger again
      $('#record-trigger').toggleClass("disabled");
      // Hide popup
      $('.ui.modal').modal('hide');
    },
    showPopUp: function(question) {
      // Select text to show and open up the pop-up
      $('#to-repeat').text(question);
      $('.ui.modal').modal({closable: false}).modal('show');
    }
  };
})();

var RecController = (function() {
  // Private attributes and methods
  var lie = null;
  var recorder = null;
  var mediaStream = null;
  var REC_DURATION = 5 * 1000;
  var captureUserMedia = function(successCallback) {
    // Initializes getUserMedia
    var session = {
        audio: true,
        video: false
    };
    navigator.getUserMedia(session, successCallback, function(error) {
        alert('Unable to capture audio. Please abort experiment.');
        console.error(error);
    });
  };
  // Public methods
  return {
    record: function(onTimeout) {
      /*
      Creates a recorder and a stream, and starts recoridng
      Accepts a callback to execute on recorder timeout
       */
       captureUserMedia(function(stream) {
           // Initialize stream and recorder
           mediaStream = stream;
           recorder = RecordRTC(stream, {
             type: 'audio',
             recorderType: StereoAudioRecorder,
             mimeType: 'audio/wav'
           });
           // Set duration of recording
           recorder.setRecordingDuration(REC_DURATION).onRecordingStopped(onTimeout);
           // Start recorder
           recorder.startRecording();
       });
    },
    getBlob: function() {
      // Returns the recorder audio as blob
      return recorder.getBlob();
    }
  };
})();

var DataModel = (function() {
  var getResponse = function() {
    // Returns the response as a Number
    return Number($("input[name='response']:checked").val());
  };
  var getItem = function() {
    // Returns the content of the item
    return currentItem.content;
  };
  var getFormData = function(recorded, blob, lie) {
    // Returns a form data corresponding to
    // the response model
    var data = new FormData();
    var response = getResponse();
    var item = getItem();
    // Append response and item
    data.append('response', response);
    data.append('item', item);
    // If no recordinbg, simply return data
    if (!recorded)
      return data;
    // Else extract recorder text and determine lie or not
    var recordedItem = $('#to-repeat').text();
    if (lie)
      var label = false;
    else
      var label = true;
    data.append('recorded', recordedItem);
    data.append('blob', blob);
    data.append('label', label);
    return data;
  };
  return {
    getResponse: getResponse,
    getFormData: getFormData
  };
})();

var controller = (function(UICtr, RecCtr, DataModel) {

  // Set references to ui and rec controller
  var LIE = null; // a flag to indicate whether the trial is a lie or not
  var uiController = UICtr;
  var recController = RecCtr;
  var model = DataModel;

  var sendRequest = function(data) {
    // Create a request instance
    var xhr = new XMLHttpRequest();
    // Send data to /upload route
    xhr.open('POST', '/upload');
    xhr.send(data);
    // Redirect to expriment again, or handle error
    xhr.onreadystatechange = (event) => {
      if (xhr.readyState === 4) {
        if (xhr.status === 200)
          window.location = '/experiment';
        else
          // Handle error (not really possible)
          alert("Es gab ein Problem mit der Aufnahme. " +
                "Bitte, stellen Sie sicher, dass Ihr Mikrofon angeschlossne ist!");
          window.location = '/experiment';
      }
    }
  };

  var onRecordingFinished = function() {
    // Triggered when recording finished
    // Assumes blob and lie flag set
    var blob = recController.getBlob();
    var formData = model.getFormData(true, blob, LIE);
    sendRequest(formData);
    uiController.hidePopUp();
  };


  // Set event listener on response button
  $("#response-trigger").on("click", function() {

    var response = model.getResponse();

    // Response 0
    if (response === 0) {
      // Simply get form data and send it to server
      var formData = model.getFormData(false, null, null);
      sendRequest(formData);
    }
    // Response -1
    else if (response === -1) {
      // Decide whether to show
      if (Math.random() > 0.5) {
        if (Math.random() > 0.5) {
          // Lie
          LIE = true;
          uiController.showPopUp(currentItem.content);
        }
        else {
          // Tell the truth
          LIE = false;
          uiController.showPopUp(currentItem.inverted);
        }
      }
      else {
        // Simply get form data and send it to server
        var formData = model.getFormData(false, null, null);
        sendRequest(formData);
      }
    }
    // Response 1
    else if (response === 1) {
      // Decide whether to show
      if (Math.random() > 0.5) {
        if (Math.random() > 0.5) {
          // Lie
          LIE = true;
          uiController.showPopUp(currentItem.inverted);
        }
        else {
          // Tell the truth
          LIE = false;
          uiController.showPopUp(currentItem.content);
        }
      }
      else {
        // Simply get form data and send it to server
        var formData = model.getFormData(false, null, null);
        sendRequest(formData);
      }
    }
  });

  // Set event listener on record button
  $('#record-trigger').on("click", function() {
    // Lock record
    uiController.lockPopUp();
    // Record and pass on record finished callbacl
    recController.record(onRecordingFinished);
  });

})(UIController, RecController, DataModel);


</script>

<% include partials/exp_footer %>
