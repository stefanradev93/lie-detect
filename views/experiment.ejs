<% include partials/header %>

<body class="main">

<!-- Scale -->
<div class="question-wrap">
  <div class="ui stackable container">
    <div class="ui stackable grid container center aligned">
      <div class="one column row">
        <div class="column">
          <div class="ui raised padded text container">
            <h3 class="heading-tertiary"><%= item.content %></h3>
          </div>
        </div>
      </div>
      <div class="one column row">
        <div class="column">
          <div class="ui segment">
            <div class="ui stackable grid container center aligned">
              <div class="five column row">
                <div class="column">
                  <div class="ui radio checkbox">
                    <input name="response" type="radio" value="-2" id="-2">
                    <label for="-2">Stimme nicht zu</label>
                  </div>
                </div>
                <div class="column">
                  <div class="ui radio checkbox">
                    <input name="response" type="radio" value="-1" id="-1">
                    <label for="-1">Stimme eher nicht zu</label>
                  </div>
                </div>
                <div class="column">
                  <div class="ui radio checkbox">
                    <input name="response" type="radio" value="0" checked id="0">
                    <label for="0">Weder noch</label>
                  </div>
                </div>
                <div class="column">
                  <div class="ui radio checkbox">
                    <input name="response" type="radio" value="1" id="1">
                    <label for="1">Stimme eher zu</label>
                  </div>
                </div>
                <div class="column">
                  <div class="ui radio checkbox">
                    <input name="response" type="radio" value="2" id="2">
                    <label for="2">Stimme zu</label>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="row">
        <div class="two wide row">
          <button id="response-trigger" class="ui large right labeled icon blue button">
            <i class="right arrow icon"></i>
            Weiter
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Modal window -->
<div class="ui modal rec-audio">
  <div class="ui stackable grid container center aligned">
    <div class="row">
      <div class="sixteen wide column">
        <br>
        <div class="ui raised padded text container">
          <h3 class="to-fade-out">Bitte sprechen Sie die folgende <span class="to-say"></span> aus:</h3>
        </div>
      </div>
    </div>
    <div class="row">
      <div class="sixteen wide column">
        <div class="ui raised padded text container">
          <h2 class="to-fade-out" id="to-repeat"><em></em></h2>
        </div>
      </div>
    </div>
    <div class="row">
      <div class="sixteen wide column">
        <div class="ui raised container">
          <div class="ui container">
            <div id="siri-container">
              <!-- Wave animation will play here -->
            </div>
            <div class="ui hidden text loader"><h3>Roboter analysiert...</h3></div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div id="record-trigger" class="ui bottom attached blue button to-fade-out">
    <i class="unmute icon"></i>
    Aufnahme starten
  </div>
</div>

<!-- Logout modal -->
<div class="ui modal quit-exp">
  <div class="header">Möchten Sie das Experiment wirklich beenden?</div>
  <div class="content">
    <div class="ui stackable grid container">
      <div class="column">
        <img class="ui mini left floated image" src="/images/robot.png">
      </div>
      <div class="middle aligned fourteen wide column">
        <p>Wenn Sie auf "Ja" klicken, ist das Experiment vorbei und
        Sie dürfen nicht mehr teilnehmen.</p>
      </div>
    </div>
  </div>
  <div class="actions">
    <div class="ui approve green button">Ja</div>
    <div class="ui cancel red button">Nein</div>
  </div>
</div>

<!-- Feedback modal -->
<div class="ui modal robot-feedback">
  <div class="header">Roboter sagt:</div>
  <div class="content">
    <div class="ui stackable grid container">
      <div class="row">
        <div class="column">
          <img class="ui mini left floated image" src="/images/robot.png">
        </div>
        <div class="middle aligned fourteen wide column">
          <h3 id="fb-text">&nbsp;</h3>
        </div>
      </div>
      <div class="row">
        <div class="center aligned fourteen wide column">
          <div class="ui centered container">
            <img src="/images/plus.png" class="ui middle aligned small image" id="fb-img">
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Score counter -->
<div class="ui container score-counter">
  <div class="ui container segment">
    <p class="font-meidum">Erreichte Punktzahl: <span><%= score %></span></p>
  </div>
</div>

<!-- Footer -->
<div class="ui center aligned footer container">
  <hr>
  <div class="ui stackable container">
    <div class="ui grid">
      <div class="two column row">
        <div class="left aligned column">
          <button class="ui right labeled icon red small button" id="logout">
            <i class="sign out icon"></i>
            Experiment Beenden
          </button>
        </div>
        <div class="right aligned column">
          <div class="ui container">
            © Copyright 2017 Universität Heidelberg
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Load thirs party scripts -->
<script type="text/javascript" src="javascripts/siriwave.js"></script>
<script type="text/javascript" src="javascripts/RecordRTC.min.js"></script>
<script type="text/javascript">
// --- Obtain current item --- //
const currentItem = <%- JSON.stringify(item) %>;

// --- UI controller --- //
const UIController = (function() {

  let posSrc = '/images/plus.png';
  let negSrc = '/images/minus.png';
  const probLieGuess = 0.6;
  const probTruthGuess = 0.8;
  // Create a wave object
  let siriWave = new SiriWave({
          container: document.getElementById('siri-container'),
          width: 250,
          height: 100,
          speed: 0.02,
          color: '#d9dde2',
          frequency: 1
    });
  // Add reference to span elements
  let whatToSay = $('span.to-say');
  // Public methods
  return {
    lockPopUp: function() {
      // Show container
      $('#siri-container').css("visibility", 'visible');
      // Disable record button
      $('#record-trigger').toggleClass("disabled");
      // Hide text
      $('.to-fade-out').css("visibility", 'hidden');
      // Start wave
      siriWave.start();
    },
    hidePopUp: function() {
      // This function is called 2 seconds after recording finished
      // Stop wave
      siriWave.stop();
      // Hide siri wave
      $('#siri-container').css("visibility", 'hidden');
      // Enable trigger again
      $('#record-trigger').toggleClass("disabled");
      // Hide popup
      $('.ui.modal.rec-audio').modal('hide');
    },
    showPopUp: function(question, lie) {
      // Select text to show and open up the pop-up
      $('#to-repeat').text(question);
      // Show appealing text according to label
      if (lie)
        whatToSay.text("Lüge");
      else
        whatToSay.text("Wahrheit");
      // Determine feedback a priori
      if (lie) {
          if (Math.random() < probLieGuess) {
            $('#fb-text').text("Ich glaube, Sie haben gelogen!");
            $("#fb-img").attr('src', negSrc);
          }
          else {
            $('#fb-text').text("Ich glaube, Sie haben die Wahrheit gesagt!");
            $("#fb-img").attr('src', posSrc);
          }    
        }
        else {
          if (Math.random() < probTruthGuess) {
            $('#fb-text').text("Ich glaube, Sie haben die Wahrheit gesagt!");
            $("#fb-img").attr('src', posSrc);
          }
          else {
            $('#fb-text').text("Ich glaube, Sie haben gelogen!");
            $("#fb-img").attr('src', negSrc);
          }
        }
        // Show actual pop-up
      $('.ui.modal.rec-audio').modal({closable: false,}).modal('show');
    },
    showLogoutPopUp: function() {
      $('.ui.modal.quit-exp').modal({
        closeable: false,
        onApprove: function() {
          window.location = '/end';
        }
      }).modal('show');
    },
    showFeedback(lie) {
      // Stop siri wave for speed
      siriWave.stop();
      $('#siri-container').css("visibility", 'hidden');
      $('.to-fade-out').css("visibility", 'hidden');
      $('.loader').toggleClass("hidden");
      setTimeout(function() {
        // Show robot feedback in 1 second
        $('.ui.modal.robot-feedback').modal({closable: false}).modal('show');
      }, 1000);
    }
  };
})();
// --- Recorder Controller --- //
const RecController = (function() {
  // Private attributes and methods
  let lie = null;
  let recorder = null;
  let mediaStream = null;
  const REC_DURATION = 5 * 1000;
  let captureUserMedia = function(successCallback) {
    // Initializes getUserMedia
    let session = {
        audio: true,
        video: false
    };
    // Handle compatibilitty	
	navigator.getUserMedia = (
    navigator.getUserMedia ||
    navigator.webkitGetUserMedia ||
    navigator.mozGetUserMedia ||
    navigator.msGetUserMedia);
	// Robust audio capturing	
	if (typeof navigator.mediaDevices.getUserMedia === 'undefined') {
    	navigator.getUserMedia(session, successCallback, (error)=> {
        alert('Es gab ein Problem mit der Aufnahme. Bitte, stellen Sie sicher, dass Sie die Mikrofonaufnahme im Browser erlaubt haben und versuchen Sie erneut.');
		window.location = '/experiment';
        console.error(error);
    	});
	} 
	else {
    	navigator.mediaDevices.getUserMedia(session).then(successCallback).catch((error) => {
        alert('Es gab ein Problem mit der Aufnahme. Bitte, stellen Sie sicher, dass Sie die Mikrofonaufnahme im Browser erlaubt haben und versuchen Sie erneut.');
		window.location = '/experiment';
        console.error(error);
    	});
	}
  };
  };
  // Public methods
  return {
    record: function(onTimeout) {
      /*
      Creates a recorder and a stream, and starts recoridng
      Accepts a callback to execute on recorder timeout
       */
       captureUserMedia(function(stream) {
           // Initialize stream and recorder
           mediaStream = stream;
           recorder = RecordRTC(stream, {
             type: 'audio',
             recorderType: StereoAudioRecorder,
             mimeType: 'audio/wav'
           });
           // Set duration of recording
           recorder.setRecordingDuration(REC_DURATION).onRecordingStopped(onTimeout);
           // Start recorder
           recorder.startRecording();
       });
    },
    getBlob: function() {
      // Returns the recorder audio as blob
      return recorder.getBlob();
    }
  };
})();
// --- Model --- //
const DataModel = (function() {
  const getResponse = function() {
    // Returns the response as a Number
    return Number($("input[name='response']:checked").val());
  };
  const getFeedbackValue = function() {
    // Determines whether the robot guessed or not
    // +1 if true, -1
    let source = $("#fb-img").attr('src');
    if (source.includes("plus")) {
		return 1;
	}
    return -1;
  };
  const getItem = function() {
    // Returns the content of the item
    return currentItem.content;
  };
  const getFormData = function(recorded, blob, lie) {
    // Returns a form data corresponding to
    // the response model
    let data = new FormData();
    let response = getResponse();
    let item = getItem();
    let feedback = getFeedbackValue();
    // Append response and item
    data.append('response', response);
    data.append('item', item);
    // If no recordinbg, simply return data
    if (!recorded)
      return data;
    // Else extract recorder text and determine lie or not
    let recordedItem = $('#to-repeat').text();
    let label = true;
    if (lie)
      label = false;
    data.append('recorded', recordedItem);
    data.append('blob', blob);
    data.append('label', label);
    data.append('feedback', feedback);
    return data;
  };
  return {
    getResponse: getResponse,
    getFormData: getFormData
  };
})();
// --- Global controller --- //
const controller = (function(UICtr, RecCtr, DataModel) {

  // Set references to ui and rec controller
  let LIE = null; // a flag to indicate whether the trial is a lie or not
  const uiController = UICtr;
  const recController = RecCtr;
  const model = DataModel;
  const lieProb = 0.5;
  const semiRecProb  = 0.75;

  const sendRequest = function(data) {
    // Create a request instance
    let xhr = new XMLHttpRequest();
    // Send data to /upload route
    xhr.open('POST', '/upload');
    xhr.send(data);
    // Redirect to expriment again, or handle error
    xhr.onreadystatechange = (event) => {
      if (xhr.readyState === 4) {
        if (xhr.status === 200)
          window.location = '/experiment';
        else
          // Handle error (not really possible)
          alert("Es gab ein Problem mit der Aufnahme. " +
                "Bitte, stellen Sie sicher, dass Ihr Mikrofon angeschlossen ist!");
          window.location = '/experiment';
      }
    }
  };

  const onRecordingFinished = function() {
    // Triggered when recording finished
    // Assumes blob and lie flag set
    let blob = recController.getBlob();
    let formData = model.getFormData(true, blob, LIE);
    // Show feedback and redirect in 3 seconds
    uiController.showFeedback(LIE);
    setTimeout(sendRequest, 5000, formData);
  };

  // Set event listener on response button
  $("#response-trigger").on("click", function() {

    let response = model.getResponse();

    // Response 0
    if (response === 0) {
      // Simply get form data and send it to server
      let formData = model.getFormData(false, null, null);
      sendRequest(formData);
    }
    // Response -1
    else if (response === -1) {
      // Decide whether to show
      if (Math.random() < semiRecProb) {
        if (Math.random() < lieProb) {
          // Lie
          LIE = true;
          uiController.showPopUp(currentItem.content, LIE);
        }
        else {
          // Tell the truth
          LIE = false;
          uiController.showPopUp(currentItem.inverted, LIE);
        }
      }
      else {
        // Simply get form data and send it to server
        let formData = model.getFormData(false, null, null);
        sendRequest(formData);
      }
    }
    // Response 1
    else if (response === 1) {
      // Decide whether to show
      if (Math.random() < semiRecProb) {
        if (Math.random() < lieProb) {
          // Lie
          LIE = true;
          uiController.showPopUp(currentItem.inverted, LIE);
        }
        else {
          // Tell the truth
          LIE = false;
          uiController.showPopUp(currentItem.content, LIE);
        }
      }
      else {
        // Simply get form data and send it to server
        let formData = model.getFormData(false, null, null);
        sendRequest(formData);
      }
    }
    // Response 2
    else if (response === 2) {
      if (Math.random() < lieProb) {
        // Lie
        LIE = true;
        uiController.showPopUp(currentItem.inverted, LIE);
      }
      else {
        // Tell the truth
        LIE = false;
        uiController.showPopUp(currentItem.content, LIE);
      }
    }
    // Response -2
    else if (response === -2) {
      if (Math.random() < lieProb) {
        // Lie
        LIE = true;
        uiController.showPopUp(currentItem.content, LIE);
      }
      else {
        // Tell the truth
        LIE = false;
        uiController.showPopUp(currentItem.inverted, LIE);
      }
    }
  });

  // Set event listener on record button
  $('#record-trigger').on("click", function() {
    // Lock record
    uiController.lockPopUp();
    // Record and pass on record finished callbacl
    recController.record(onRecordingFinished);
  });

  // Set event listener on logout button
  $('#logout').on("click", function() {
    uiController.showLogoutPopUp();
  });

})(UIController, RecController, DataModel);
</script>
</body>
</html>
